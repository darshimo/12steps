5章
リンク-オブジェクトファイルを結合し、実行形式ファイルを作る。
機械語コードやデータをそれぞれの領域にまとめる必要がある。->セクション
実行コード->.textセクション
初期値あり静的変数->.dataセクション
初期値なし静的変数->.bssセクション
リンカは(設定がなければ)それぞれのオブジェクトファイルの同じセクションを一つにまとめる。

セグメント-リンク後に生成される。
実行時には実行形式ファイルのイメージがメモリ上に展開される。->ローダの仕事
ロードの際のメモリの単位が「セグメント」

セクション、セグメントはそれぞれセクションヘッダ、プログラムヘッダで管理される。
セクションヘッダ、プログラムヘッダはそれぞれファイル中のセクションヘッダテーブル、プログラムヘッダテーブルに並ぶ。
多くの場合、複数のセクションをまとめてセグメントに含め、似た役割のセクションをまとめて展開する。

7章
コントローラの処理はcpuより遅く、コントローラの送信処理をループで待つのは非効率である。よって送信処理が完了すると割り込みにより通知し、送信処理を行うようにすれば、待ち時間を別の処理に使うことができる。->シリアル送信割り込み
・割り込みと例外
1.外部ハードウェアにより割り込み線がアサートされる。->割り込み
2.不正メモリアクセスやゼロ除算などでcpu内部で発生する。->例外
3.システムコール命令やトラップ命令などでプログラム側からわざと発生する。->ソフトウェア割り込み
割り込み入力ピンの数に対しコントローラの数が多いと、一つの入力ピンに複数の割り込みをまとめる必要があるので、「割り込みコントローラ」を使う。
割り込みマスク->割り込みの有効・無効を制御する。
割り込み処理が終われば元の処理に戻る必要があるため、割り込み時には中断された処理を退避させる必要があり、割り込み処理の最後は「割り込み復帰命令」が置かれる。

8章
・タスク						-	サービスの単位
・スレッド					-	プログラムをタスクごとに分割して動作できるようにしたもの。
・システムコール		-	OSに対するサービス要求。スレッド側からの明示的な割り込みである。
・スケジューリング	-	次に動かすスレッドの選択
・ディスパッチ			-	選択されたスレッドの再開
・コンテキスト			-	スレッド中断時に保存が必要なCPUの状態・

必要なスタックは
1. ブートスタック		:	起動処理で利用される 0xffff00~0x000000
2. 割り込みスタック	:	割り込み処理で利用される 0xffff00~0x000000
3. ユーザスタック		:	スレッドごとに確保される(ブートローダーには不必要) 0xfff400~0x000000

・カレントスレッド	-	実行中のスレッド
・レディーキュー		-	実行可能スレッドのキュー。next(ポインタ)でつないでいる。

レジスタ
er0		:	実行中のスレッドのポインタ
er1~6	:	値など
er7		:	スタックポインタ

・rte命令
割り込みが発生した時、H8ではCCR(1byte)とプログラムカウンタ(3byte)の値が自動的にスタックに保存される。rte命令は割り込み復帰命令であり、スタックに保存されているPCの値を復旧し、割り込み前の動作に戻る。

dispatch(kz_context *)に、スレッドの情報が収まっているスタックポインタへのアドレスを渡す。dispatchによりスタックに保存されているER0~6の値を復旧し、sp(ER7)がthread_initのアドレスを指している時にrte命令を呼び出す。この時、spに保存されているthread_initがPCにセットされ実行される。(p.247参照)

関数が呼び出されるとき、レジスタに格納されている値を引数として渡すことができる.(p311参照)